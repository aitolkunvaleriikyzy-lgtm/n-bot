import os
import asyncio
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# -----------------------------
# Ortam deƒüi≈ükeninden TOKEN al
# -----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN ortam deƒüi≈ükeni bulunamadƒ±!")

bot = Bot(TOKEN)

# -----------------------------
# Flask app
# -----------------------------
app = Flask(__name__)

# -----------------------------
# Basit start handler
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–æ–±–∞", callback_data="yes"),
         InlineKeyboardButton("‚ùå –ñ–æ–∫", callback_data="no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–°–∞–ª–∞–º! –ú–µ–Ω —Å–∞–≥–∞ –Ω–∞–º–∞–∑–¥—ã –∂–µ“£–∏–ª –∂–∞–Ω–∞ —Ç“Ø—à“Ø–Ω“Ø–∫—Ç“Ø“Ø –∂–æ–ª –º–µ–Ω–µ–Ω “Ø–π—Ä”©—Ç”© —Ç—É—Ä–≥–∞–Ω –±–æ—Ç–º—É–Ω.\n“Æ–π—Ä”©–Ω“Ø“Ø–≥”© –¥–∞—è—Ä—Å—ã“£–±—ã?",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "yes":
        keyboard = [[InlineKeyboardButton("‚úÖ –ë–∞—à—Ç–∞", callback_data="start_lesson")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üåü –ë—É–ª –∂–µ—Ä–¥–µ —Å–µ–Ω –Ω–∞–º–∞–∑–¥—ã —Ç–æ–ª—É–∫ “Ø–π—Ä”©–Ω”©—Å“Ø“£. –°–∞–±–∞–∫—Ç—ã –±–∞—à—Ç–æ–æ “Ø—á“Ø–Ω —Ç”©–º”©–Ω–∫“Ø ‚Äú–ë–∞—à—Ç–∞‚Äù –±–∞—Å–∫—ã—á—ã–Ω –±–∞—Å:", 
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–ú–∞–∫—É–ª, –¥–∞—è—Ä –±–æ–ª–≥–æ–Ω–¥–æ –∫–∞–π—Ä—ã–ª üåø")

async def lesson_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üìò –ê–ª–≥–∞—á–∫—ã —Å–∞–±–∞–≥—ã–±—ã–∑ ‚Äì –ì—É—Å—É–ª. –ë—É–ª —Å–∞–±–∞–∫—Ç–∞ –≥—É—Å—É–ª —Ç—É—É—Ä–∞–ª—É—É “Ø–π—Ä”©–Ω”©—Å“Ø–∑.")
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ö–∏–π–∏–Ω–∫–∏", callback_data="daarat_lesson")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ì—É—Å—É–ª —Å–∞–±–∞–≥—ã–Ω—ã–Ω –≤–∏–¥–µ–æ—Å—É (—Ç–µ—Å—Ç): https://youtube.com", reply_markup=reply_markup)

async def daarat_lesson_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üìò –ö–∏–π–∏–Ω–∫–∏ —Å–∞–±–∞–∫ ‚Äì –î–∞–∞—Ä–∞—Ç. –ë—É–ª —Å–∞–±–∞–∫—Ç–∞ –¥–∞–∞—Ä–∞—Ç –∞–ª—É—É –∂–æ–ª—É–Ω “Ø–π—Ä”©–Ω”©—Å“Ø–∑.")
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ö–∏–π–∏–Ω–∫–∏", callback_data="next_lesson")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–î–∞–∞—Ä–∞—Ç —Å–∞–±–∞–≥—ã–Ω—ã–Ω –≤–∏–¥–µ–æ—Å—É (—Ç–µ—Å—Ç): https://youtube.com", reply_markup=reply_markup)

async def next_lesson_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üìò –ö–∏–π–∏–Ω–∫–∏ —Å–∞–±–∞–∫ ‚Äì –ù–∞–º–∞–∑. –ë—É–ª —Å–∞–±–∞–∫—Ç–∞ –Ω–∞–º–∞–∑ —Ç—É—É—Ä–∞–ª—É—É “Ø–π—Ä”©–Ω”©—Å“Ø–∑.")
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ö–∏–π–∏–Ω–∫–∏", callback_data="short_suras")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ù–∞–º–∞–∑ —Å–∞–±–∞–≥—ã–Ω—ã–Ω –≤–∏–¥–µ–æ—Å—É (—Ç–µ—Å—Ç): https://youtube.com", reply_markup=reply_markup)

async def short_suras_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("üìñ –°“Ø—Ä”©–ª”©—Ä–≥”© ”©—Ç“Ø“Ø", url="https://youtube.com")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üìñ –°–∏–∑–≥–µ –∂”©–Ω”©—Ç“Ø–ª–≥”©–Ω —à–∏–ª—Ç–µ–º–µ–¥–µ–Ω –Ω–∞–º–∞–∑–¥–∞ –æ–∫—É–ª—É—É—á—É –∫—ã—Å–∫–∞ –ö—É—Ä–∞–Ω —Å“Ø—Ä”©–ª”©—Ä“Ø–Ω “Ø–π—Ä”©–Ω”© –∞–ª–∞—Å—ã–∑.", reply_markup=reply_markup)
    next_keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ö–∏–π–∏–Ω–∫–∏", callback_data="end_lesson")]]
    next_reply_markup = InlineKeyboardMarkup(next_keyboard)
    await query.message.reply_text("–°“Ø—Ä”©–ª”©—Ä –º–µ–Ω–µ–Ω —Ç–∞–∞–Ω—ã—à–∫–∞–Ω–¥–∞–Ω –∫–∏–π–∏–Ω –∫–∏–π–∏–Ω–∫–∏ –±”©–ª“Ø–º–≥”© ”©—Ç“Ø“£“Ø–∑.", reply_markup=next_reply_markup)

async def end_lesson_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("üìñ –£–ª–∞–Ω—Ç—É—É", callback_data="namaz_info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("‚û°Ô∏è –ö–∏–π–∏–Ω–∫–∏ —Å–∞–±–∞–∫ ‚Äì –ù–∞–º–∞–∑. –ë–µ—à —É–±–∞–∫ –Ω–∞–º–∞–∑–¥—ã “Ø–π—Ä”©–Ω”©—Å“Ø–∑.", reply_markup=reply_markup)

async def namaz_info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "*–ë–ï–® –£–ë–ê–ö –ù–ê–ú–ê–ó*\n\n"
        "‚Ä¢ *–ë–∞–≥—ã–º–¥–∞—Ç –Ω–∞–º–∞–∑—ã:* —ç–∫–∏ —Ä–µ–∫–µ—Ç —Å“Ø–Ω–Ω”©—Ç, —ç–∫–∏ —Ä–µ–∫–µ—Ç –ø–∞—Ä–∑.\n"
        "‚Ä¢ *–ë–µ—à–∏–º –Ω–∞–º–∞–∑—ã:* —Ç”©—Ä—Ç —Ä–µ–∫–µ—Ç —Å“Ø–Ω–Ω”©—Ç, —Ç”©—Ä—Ç —Ä–µ–∫–µ—Ç –ø–∞—Ä–∑ –∂–∞–Ω–∞ —ç–∫–∏ —Ä–µ–∫–µ—Ç —Å“Ø–Ω–Ω”©—Ç.\n"
        "‚Ä¢ *–ê—Å—Ä (–î–∏–≥–µ—Ä) –Ω–∞–º–∞–∑—ã:* —Ç”©—Ä—Ç —Ä–µ–∫–µ—Ç –ø–∞—Ä–∑.\n"
        "‚Ä¢ *–®–∞–º –Ω–∞–º–∞–∑—ã:* “Ø—á —Ä–µ–∫–µ—Ç –ø–∞—Ä–∑, —ç–∫–∏ —Ä–µ–∫–µ—Ç —Å“Ø–Ω–Ω”©—Ç.\n"
        "‚Ä¢ *–ö—É–ø—Ç–∞–Ω –Ω–∞–º–∞–∑—ã:* —Ç”©—Ä—Ç —Ä–µ–∫–µ—Ç –ø–∞—Ä–∑, —ç–∫–∏ —Ä–µ–∫–µ—Ç —Å“Ø–Ω–Ω”©—Ç. –ö–∏–π–∏–Ω “Ø—á —Ä–µ–∫–µ—Ç –≤–∏—Ç–∏—Ä.\n\n"
        "*–ù–ê–ú–ê–ó–î–´–ù –£–ë–ê–ö–´–¢–¢–ê–†–´*\n"
        "‚Ä¢ *–ë–∞–≥—ã–º–¥–∞—Ç –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã:* —Ç–∞“£ –∞–≥–∞—Ä–≥–∞–Ω–¥–∞–Ω –±–∞—à—Ç–∞–ø –∫“Ø–Ω —á—ã–∫–∫–∞–Ω–≥–∞ —á–µ–π–∏–Ω–∫–∏ –∞—Ä–∞–ª—ã–∫.\n"
        "‚Ä¢ *–ë–µ—à–∏–º –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã:* –∫“Ø–Ω —á–∞–∫ —Ç“Ø—à—Ç”©–Ω –±–∏—Ä –∞–∑ –æ–æ–≥–æ–Ω–¥–æ–Ω –±–∞—à—Ç–∞–ø –∞—Ä –±–∏—Ä –Ω–µ—Ä—Å–µ–Ω–∏–Ω –∫”©–ª”©–∫”©—Å“Ø ”©–∑“Ø –º–µ–Ω–µ–Ω –±–∞—Ä–∞–±–∞—Ä –±–æ–ª–≥–æ–Ω–≥–æ —á–µ–π–∏–Ω–∫–∏ –∞—Ä–∞–ª—ã–∫.\n"
        "‚Ä¢ *–ê—Å—Ä –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã:* –±–µ—à–∏–º–¥–∏–Ω —É–±–∞–≥—ã –±“Ø—Ç–∫”©–Ω–¥”©–Ω –±–∞—à—Ç–∞–ø –∫“Ø–Ω –±–∞—Ç–∫–∞–Ω–≥–∞ —á–µ–π–∏–Ω–∫–∏ –∞—Ä–∞–ª—ã–∫.\n"
        "‚Ä¢ *–®–∞–º –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã:* –∫“Ø–Ω —Ç–æ–ª—É–≥—É –º–µ–Ω–µ–Ω –±–∞—Ç–∫–∞–Ω–¥–∞–Ω —Ç–∞—Ä—Ç—ã–ø –∫“Ø–Ω–¥“Ø–Ω —à–∞–ø–∞–≥—ã (–∫—ã–∑—ã–ª—ã) –∫–µ—Ç–∫–µ–Ω–≥–µ —á–µ–π–∏–Ω–∫–∏ –∞—Ä–∞–ª—ã–∫.\n"
        "‚Ä¢ *–ö—É–ø—Ç–∞–Ω –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã:* —à–∞–º –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã —Ç–æ–ª—É–∫ –±“Ø—Ç–∫”©–Ω–¥”©–Ω —Ç–∞—Ä—Ç—ã–ø –±–∞–≥—ã–º–¥–∞—Ç –Ω–∞–º–∞–∑—ã–Ω—ã–Ω —É–±–∞–≥—ã –∫–∏—Ä–≥–µ–Ω–≥–µ —á–µ–π–∏–Ω–∫–∏ –∞—Ä–∞–ª—ã–∫.\n\n"
        "*–≠–°–ö–ï–†–¢“Æ“Æ*\n"
        "–ë–∏—Ä –∫“Ø–Ω–¥”© “Ø—á —É–±–∞–∫—ã—Ç –±–∞—Ä, –æ—à–æ–ª —É–±–∞–∫—Ç–∞—Ä–¥–∞ –Ω–∞–º–∞–∑ –æ–∫—É–ª–±–∞–π—Ç:\n"
        "‚Äì –≠—Ä—Ç–µ –º–µ–Ω–µ–Ω –∫“Ø–Ω —á—ã–≥—ã–ø –∂–∞—Ç–∫–∞–Ω–¥–∞.\n"
        "‚Äì –ö“Ø–Ω —á–∞–∫ —Ç“Ø—à–∫”© –∫–µ–ª–≥–µ–Ω–¥–µ.\n"
        "‚Äì –ö“Ø–Ω –±–∞—Ç—ã–ø –∂–∞—Ç–∫–∞–Ω–¥–∞ (—ç–≥–µ—Ä –∞—Å—Ä –Ω–∞–º–∞–∑—ã–Ω –æ–∫—É–±–∞–≥–∞–Ω –±–æ–ª—Å–æ –∫“Ø–Ω –±–∞—Ç—ã–ø –∂–∞—Ç–∫–∞–Ω–¥–∞ –æ–∫—É—Å–∞ –±–æ–ª–æ—Ç)"
    )
    await query.message.reply_text(text, parse_mode="Markdown")
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ë“Ø—Ç—Ç“Ø—Ä“Ø“Ø", callback_data="final_message")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–°–∞–±–∞–∫ –±“Ø—Ç–∫”©–Ω–¥”©–Ω –∫–∏–π–∏–Ω ‚Äò–ë“Ø—Ç—Ç“Ø—Ä“Ø“Ø‚Äô –±–∞—Å–∫—ã—á—ã–Ω –±–∞—Å—ã–ø, –∫–∏–π–∏–Ω–∫–∏ –±”©–ª“Ø–º–≥”© ”©—Ç“Ø“£“Ø–∑:", 
        reply_markup=reply_markup
    )


async def final_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    final_text = (
        "üéâ –ö—É—Ç—Ç—É–∫—Ç–∞–π–±—ã–∑! –°–∏–∑ –Ω–∞–º–∞–∑ “Ø–π—Ä”©–Ω“Ø“Ø —Å–∞–±–∞–≥—ã–Ω –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∞—è–∫—Ç–∞–¥—ã“£—ã–∑.\n"
        "–ë—É–ª —á–æ“£ –∂–µ—Ç–∏—à–∫–µ–Ω–¥–∏–∫, —ç–º–∏ –∫“Ø–Ω“Ø–º–¥“Ø–∫ –∏–±–∞–¥–∞—Ç—ã“£—ã–∑–¥–∞ –±—É–ª –±–∏–ª–∏–º–¥–∏ –∫–æ–ª–¥–æ–Ω—Å–æ“£—É–∑ –±–æ–ª–æ—Ç.\n\n"
        "üìå –ë—É–ª –±–æ—Ç aitat.mektebi Instagram –±–∞—Ä–∞–∫—á–∞—Å—ã —Ç–∞—Ä–∞–±—ã–Ω–∞–Ω –¥–∞—è—Ä–¥–∞–ª–¥—ã."
    )
    keyboard = [[InlineKeyboardButton("üí° –ö–æ–ª–¥–æ–æ –∫”©—Ä—Å”©—Ç“Ø“Ø", callback_data="donation_message")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(final_text, reply_markup=reply_markup)

async def donation_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    donation_text = "üí° –ë—É–ª –∫—ã–∑–º–∞—Ç —Ç–æ–ª—É–≥—É –º–µ–Ω–µ–Ω –∞–∫—ã—Å—ã–∑. –°–∞–ª—ã–º –∫–æ—à—É—É “Ø—á“Ø–Ω —Ç”©–º”©–Ω–∫“Ø –±–∞—Å–∫—ã—á—Ç—ã –∫–æ–ª–¥–æ–Ω—É“£—É–∑."
    keyboard = [[InlineKeyboardButton("‚úÖ –°–∞–ª—ã–º –∫–æ—à—É—É", callback_data="start_donation")],
                [InlineKeyboardButton("‚ùå –ñ–æ–∫", callback_data="exit_session")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(donation_text, reply_markup=reply_markup)

async def start_donation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üí≥ –°–∞–ª—ã–º –∫–æ—à—É—É “Ø—á“Ø–Ω –±—É–ª —à–∏–ª—Ç–µ–º–µ–≥–µ –∫–∏—Ä–∏“£–∏–∑:\nM Bank –ë–ï–ì–ò–ú–ñ–ê–ù –ê. +996 (508) 050 268")

async def exit_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üö™ –°–∏–∑ –æ—Ç—É—Ä—É–º–¥–∞–Ω —á—ã–∫—Ç—ã“£—ã–∑. –†–∞—Ö–º–∞—Ç!")

# -----------------------------
# Application ve Handler Ekleme
# -----------------------------
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler, pattern="^(yes|no)$"))
application.add_handler(CallbackQueryHandler(lesson_start_handler, pattern="^start_lesson$"))
application.add_handler(CallbackQueryHandler(daarat_lesson_handler, pattern="^daarat_lesson$"))
application.add_handler(CallbackQueryHandler(next_lesson_handler, pattern="^next_lesson$"))
application.add_handler(CallbackQueryHandler(short_suras_handler, pattern="^short_suras$"))
application.add_handler(CallbackQueryHandler(end_lesson_handler, pattern="^end_lesson$"))
application.add_handler(CallbackQueryHandler(namaz_info_handler, pattern="^namaz_info$"))
application.add_handler(CallbackQueryHandler(final_message_handler, pattern="^final_message$"))
application.add_handler(CallbackQueryHandler(donation_message_handler, pattern="^donation_message$"))
application.add_handler(CallbackQueryHandler(start_donation_handler, pattern="^start_donation$"))
application.add_handler(CallbackQueryHandler(exit_session_handler, pattern="^exit_session$"))

# -----------------------------
# Webhook endpoint
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    asyncio.run(application.process_update(update))
    return "ok"

@app.route("/")
def index():
    return "Bot √ßalƒ±≈üƒ±yor!"

# -----------------------------
# Flask √ßalƒ±≈ütƒ±rma
# -----------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
   
